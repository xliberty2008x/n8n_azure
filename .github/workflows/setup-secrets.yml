name: Setup GitHub Secrets Helper

on:
  workflow_dispatch:

jobs:
  setup-secrets:
    environment: n8n_bs
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Current Secrets and Provide Setup Commands
        run: |
          echo "==================== CHECKING CURRENT SECRETS ===================="

          # Check if secrets exist
          ADMIN_PWD_EXISTS=false
          POSTGRES_PWD_EXISTS=false

          if [ -n "${{ secrets.TF_VAR_ADMINISTRATOR_LOGIN_PASSWORD }}" ]; then
            echo "✅ TF_VAR_ADMINISTRATOR_LOGIN_PASSWORD is already set"
            ADMIN_PWD_EXISTS=true
          else
            echo "❌ TF_VAR_ADMINISTRATOR_LOGIN_PASSWORD is NOT set"
          fi

          if [ -n "${{ secrets.TF_VAR_POSTGRES_PASSWORD }}" ]; then
            echo "✅ TF_VAR_POSTGRES_PASSWORD is already set"
            POSTGRES_PWD_EXISTS=true
          else
            echo "❌ TF_VAR_POSTGRES_PASSWORD is NOT set"
          fi

          echo ""
          echo "==================== GETTING AZURE INFO ===================="

          # Get PostgreSQL server info
          POSTGRES_SERVER=$(az postgres flexible-server list --resource-group n8n_bs --query '[0].name' -o tsv)
          echo "PostgreSQL Server: $POSTGRES_SERVER"

          ADMIN_USER=$(az postgres flexible-server show --resource-group n8n_bs --name $POSTGRES_SERVER --query administratorLogin -o tsv)
          echo "Admin Username: $ADMIN_USER"

          # Generate a strong random password suggestion
          SUGGESTED_PASSWORD=$(openssl rand -base64 24 | tr -d '/+=' | cut -c1-20)

          echo ""
          echo "==================== SETUP INSTRUCTIONS ===================="
          echo ""

          if [ "$ADMIN_PWD_EXISTS" = false ] || [ "$POSTGRES_PWD_EXISTS" = false ]; then
            echo "You need to set up GitHub secrets. Here's how to do it via GitHub CLI:"
            echo ""
            echo "1. First, install GitHub CLI if you haven't:"
            echo "   https://cli.github.com/"
            echo ""
            echo "2. Authenticate with GitHub:"
            echo "   gh auth login"
            echo ""
            echo "3. Set the secrets using these commands:"
            echo ""

            if [ "$ADMIN_PWD_EXISTS" = false ]; then
              echo "   # Set PostgreSQL admin password"
              echo "   gh secret set TF_VAR_ADMINISTRATOR_LOGIN_PASSWORD \\"
              echo "     --repo xliberty2008x/n8n_azure \\"
              echo "     --env n8n_bs \\"
              echo "     --body '$SUGGESTED_PASSWORD'"
              echo ""
            fi

            if [ "$POSTGRES_PWD_EXISTS" = false ]; then
              echo "   # Set n8n database user password (can be same as admin)"
              echo "   gh secret set TF_VAR_POSTGRES_PASSWORD \\"
              echo "     --repo xliberty2008x/n8n_azure \\"
              echo "     --env n8n_bs \\"
              echo "     --body '$SUGGESTED_PASSWORD'"
              echo ""
            fi

            echo "   Suggested password: $SUGGESTED_PASSWORD"
            echo "   (Or use your own strong password)"
            echo ""
            echo "4. After setting secrets, you also need to update Azure PostgreSQL password:"
            echo ""
            echo "   # Run this in another GitHub Actions workflow or Azure CLI:"
            echo "   az postgres flexible-server update \\"
            echo "     --resource-group n8n_bs \\"
            echo "     --name $POSTGRES_SERVER \\"
            echo "     --admin-password '$SUGGESTED_PASSWORD'"
            echo ""
            echo "==================== OR USE THIS SIMPLER APPROACH ===================="
            echo ""
            echo "If you want me to handle everything, I can:"
            echo "1. Reset the PostgreSQL password in Azure to a new random value"
            echo "2. Tell you the password so you can set it as a GitHub secret"
            echo ""
            echo "To do this, I'll create another workflow called 'Reset PostgreSQL Password'"
            echo ""
          else
            echo "✅ ALL SECRETS ARE ALREADY SET!"
            echo ""
            echo "You can now run the 'Apply Python Task Runner - External Mode' workflow."
          fi
