name: Apply Python Task Runner - External Mode

on:
  workflow_dispatch:

jobs:
  terraform-apply:
    environment: n8n_bs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set kubectl context for the AKS cluster
        run: |
          az aks get-credentials --resource-group n8n_bs --name n8nAKScluster --overwrite-existing

      - name: Get Infrastructure Values from Azure
        id: azure-vars
        run: |
          echo "==================== EXTRACTING FROM AZURE ===================="

          # Get subscription ID
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          echo "subscription_id=$SUBSCRIPTION_ID" >> $GITHUB_OUTPUT
          echo "Subscription ID extracted ✅"

          # Get PostgreSQL server name and FQDN
          POSTGRES_SERVER=$(az postgres flexible-server list --resource-group n8n_bs --query '[0].name' -o tsv)
          PGHOST=$(az postgres flexible-server show --resource-group n8n_bs --name $POSTGRES_SERVER --query fullyQualifiedDomainName -o tsv)
          ADMIN_USER=$(az postgres flexible-server show --resource-group n8n_bs --name $POSTGRES_SERVER --query administratorLogin -o tsv)

          echo "pghost=$PGHOST" >> $GITHUB_OUTPUT
          echo "PostgreSQL Host: $PGHOST"
          echo "PostgreSQL Admin: $ADMIN_USER"

          echo "administrator_login=$ADMIN_USER" >> $GITHUB_OUTPUT
          echo "postgres_username=$ADMIN_USER" >> $GITHUB_OUTPUT
          echo "postgres_database=n8n" >> $GITHUB_OUTPUT

          echo "==================== EXTRACTING FROM N8N DEPLOYMENT ===================="

          # Find n8n pod across all namespaces
          echo "Searching for running n8n pod..."
          POD_INFO=$(kubectl get pods --all-namespaces --field-selector status.phase=Running -o json | jq -r '.items[] | select(.metadata.name | contains("n8n")) | "\(.metadata.namespace) \(.metadata.name)"' | head -n1)

          if [ -z "$POD_INFO" ]; then
            echo "❌ ERROR: No running n8n pod found!"
            exit 1
          fi

          NAMESPACE=$(echo "$POD_INFO" | awk '{print $1}')
          POD_NAME=$(echo "$POD_INFO" | awk '{print $2}')

          echo "Found n8n pod: $POD_NAME in namespace: $NAMESPACE"
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT

          # Extract password from running n8n container
          echo "Extracting database password from running n8n deployment..."
          POSTGRES_PWD=$(kubectl get pod "$POD_NAME" -n "$NAMESPACE" -o json | jq -r '.spec.containers[] | select(.name=="n8n") | .env[] | select(.name=="DB_POSTGRESDB_PASSWORD") | .value')

          if [ -z "$POSTGRES_PWD" ]; then
            echo "❌ ERROR: Could not extract database password from n8n pod!"
            exit 1
          fi

          echo "postgres_password=$POSTGRES_PWD" >> $GITHUB_OUTPUT
          echo "administrator_login_password=$POSTGRES_PWD" >> $GITHUB_OUTPUT
          echo "Database password extracted ✅"

          echo ""
          echo "✅ All values extracted successfully from existing infrastructure"

      - name: Terraform Init
        run: terraform init
        env:
          ARM_USE_CLI: true
          ARM_SUBSCRIPTION_ID: ${{ steps.azure-vars.outputs.subscription_id }}

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        env:
          ARM_USE_CLI: true
          ARM_SUBSCRIPTION_ID: ${{ steps.azure-vars.outputs.subscription_id }}
          # Fetched from Azure
          TF_VAR_subscription_id: ${{ steps.azure-vars.outputs.subscription_id }}
          TF_VAR_namespace: ${{ steps.azure-vars.outputs.namespace }}
          TF_VAR_postgres_database: ${{ steps.azure-vars.outputs.postgres_database }}
          TF_VAR_postgres_username: ${{ steps.azure-vars.outputs.postgres_username }}
          TF_VAR_administrator_login: ${{ steps.azure-vars.outputs.administrator_login }}
          TF_VAR_PGHOST: ${{ steps.azure-vars.outputs.pghost }}
          # Passwords (from secrets if available, otherwise generated)
          TF_VAR_administrator_login_password: ${{ steps.azure-vars.outputs.administrator_login_password }}
          TF_VAR_postgres_password: ${{ steps.azure-vars.outputs.postgres_password }}
          # Not needed with CLI auth (use dummy values)
          TF_VAR_client_id: "not-needed-with-cli-auth"
          TF_VAR_client_secret: "not-needed-with-cli-auth"
          TF_VAR_tenant_id: "not-needed-with-cli-auth"

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          ARM_USE_CLI: true
          ARM_SUBSCRIPTION_ID: ${{ steps.azure-vars.outputs.subscription_id }}
          # Fetched from Azure
          TF_VAR_subscription_id: ${{ steps.azure-vars.outputs.subscription_id }}
          TF_VAR_namespace: ${{ steps.azure-vars.outputs.namespace }}
          TF_VAR_postgres_database: ${{ steps.azure-vars.outputs.postgres_database }}
          TF_VAR_postgres_username: ${{ steps.azure-vars.outputs.postgres_username }}
          TF_VAR_administrator_login: ${{ steps.azure-vars.outputs.administrator_login }}
          TF_VAR_PGHOST: ${{ steps.azure-vars.outputs.pghost }}
          # Passwords (from secrets if available, otherwise generated)
          TF_VAR_administrator_login_password: ${{ steps.azure-vars.outputs.administrator_login_password }}
          TF_VAR_postgres_password: ${{ steps.azure-vars.outputs.postgres_password }}
          # Not needed with CLI auth (use dummy values)
          TF_VAR_client_id: "not-needed-with-cli-auth"
          TF_VAR_client_secret: "not-needed-with-cli-auth"
          TF_VAR_tenant_id: "not-needed-with-cli-auth"

      - name: Wait for Deployment Rollout
        run: |
          echo "Waiting for n8n deployment to complete rollout..."
          kubectl rollout status deployment/n8n -n ${{ steps.azure-vars.outputs.namespace }} --timeout=5m

      - name: Verify Both Containers are Running
        run: |
          echo "==================== POD STATUS ===================="
          kubectl get pods -n ${{ steps.azure-vars.outputs.namespace }} -o wide
          echo ""

          echo "==================== CONTAINER STATUS ===================="
          kubectl get pods -n ${{ steps.azure-vars.outputs.namespace }} -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{range .status.containerStatuses[*]}{"\t"}{.name}{": "}{.ready}{"\n"}{end}{end}'
          echo ""

      - name: Check n8n Logs
        run: |
          echo "==================== N8N LOGS (Last 30 lines) ===================="
          kubectl logs -n ${{ steps.azure-vars.outputs.namespace }} deployment/n8n -c n8n --tail=30
          echo ""

      - name: Check Runner Logs
        run: |
          echo "==================== RUNNER LOGS (Last 30 lines) ===================="
          kubectl logs -n ${{ steps.azure-vars.outputs.namespace }} deployment/n8n -c n8n-runner --tail=30
          echo ""

      - name: Verify Service
        run: |
          echo "==================== SERVICE STATUS ===================="
          kubectl get svc -n ${{ steps.azure-vars.outputs.namespace }}
          echo ""

          echo "✅ Python Task Runner in External Mode deployed successfully!"
          echo ""
          echo "Next steps:"
          echo "1. Access your n8n instance"
          echo "2. Create or edit a Code node"
          echo "3. Select 'Python (Native) (Beta)' from the language dropdown"
          echo "4. Test with Python code using packages like pandas, numpy, requests"
          echo ""
          echo "Available Python packages:"
          echo "  - pandas, numpy, requests, beautifulsoup4, lxml"
          echo "  - openpyxl, pypdf, pillow, python-dateutil, pytz"
