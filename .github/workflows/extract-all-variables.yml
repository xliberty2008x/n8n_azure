name: Extract ALL Variables and Save as GitHub Secrets

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  extract-and-save:
    environment: n8n_bs
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group n8n_bs --name n8nAKScluster --overwrite-existing
          echo "✅ Connected to AKS cluster"

      - name: Extract Values from Azure
        id: extract-azure
        run: |
          echo "==================== EXTRACTING FROM AZURE ===================="

          # Get subscription ID
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          echo "Subscription ID: $SUBSCRIPTION_ID"
          echo "subscription_id=$SUBSCRIPTION_ID" >> $GITHUB_OUTPUT

          # Get PostgreSQL server information
          POSTGRES_SERVER=$(az postgres flexible-server list --resource-group n8n_bs --query '[0].name' -o tsv)
          echo "PostgreSQL Server: $POSTGRES_SERVER"

          ADMIN_LOGIN=$(az postgres flexible-server show \
            --resource-group n8n_bs \
            --name $POSTGRES_SERVER \
            --query administratorLogin -o tsv)
          echo "Administrator Login: $ADMIN_LOGIN"
          echo "administrator_login=$ADMIN_LOGIN" >> $GITHUB_OUTPUT

          PGHOST=$(az postgres flexible-server show \
            --resource-group n8n_bs \
            --name $POSTGRES_SERVER \
            --query fullyQualifiedDomainName -o tsv)
          echo "PostgreSQL Host: $PGHOST"
          echo "pghost=$PGHOST" >> $GITHUB_OUTPUT

          echo "✅ Azure extraction complete"

      - name: Extract Values from n8n Deployment
        id: extract-k8s
        run: |
          echo "==================== EXTRACTING FROM N8N DEPLOYMENT ===================="

          # First, find the n8n deployment in any namespace
          echo "Searching for n8n deployment across all namespaces..."
          DEPLOYMENT_INFO=$(kubectl get deployments --all-namespaces -l app=n8n -o json 2>/dev/null || kubectl get deployments --all-namespaces --field-selector metadata.name=n8n -o json 2>/dev/null || echo '{"items":[]}')

          # Check if we found any deployment
          DEPLOYMENT_COUNT=$(echo "$DEPLOYMENT_INFO" | jq '.items | length')

          if [ "$DEPLOYMENT_COUNT" -eq 0 ]; then
            echo "⚠️  No n8n deployment found. Searching by pod name..."
            # Try to find n8n pod
            POD_INFO=$(kubectl get pods --all-namespaces --field-selector status.phase=Running -o json | jq '.items[] | select(.metadata.name | contains("n8n"))')

            if [ -z "$POD_INFO" ]; then
              echo "❌ No running n8n deployment or pod found!"
              echo "This might be the first deployment. Using default values."

              # Use defaults
              NAMESPACE="n8n"
              POSTGRES_DB="n8n"
              POSTGRES_USER="psqladminun"
              POSTGRES_PASSWORD="TEMP_PASSWORD_NEEDS_MANUAL_SET"

              echo "⚠️  Using default values - you may need to set TF_VAR_postgres_password manually"
            else
              # Extract from pod
              NAMESPACE=$(echo "$POD_INFO" | jq -r '.metadata.namespace')
              echo "Found n8n pod in namespace: $NAMESPACE"

              POD_NAME=$(echo "$POD_INFO" | jq -r '.metadata.name')

              # Get deployment from pod's namespace
              kubectl get deployment -n "$NAMESPACE" -o json > /tmp/n8n-deployment.json

              # Extract environment variables
              POSTGRES_PASSWORD=$(jq -r '.items[0].spec.template.spec.containers[0].env[] | select(.name=="DB_POSTGRESDB_PASSWORD") | .value' /tmp/n8n-deployment.json)
              POSTGRES_USER=$(jq -r '.items[0].spec.template.spec.containers[0].env[] | select(.name=="DB_POSTGRESDB_USER") | .value' /tmp/n8n-deployment.json)
              POSTGRES_DB=$(jq -r '.items[0].spec.template.spec.containers[0].env[] | select(.name=="DB_POSTGRESDB_DATABASE") | .value' /tmp/n8n-deployment.json)
            fi
          else
            # Found deployment(s)
            echo "Found $DEPLOYMENT_COUNT n8n deployment(s)"

            # Get first deployment
            NAMESPACE=$(echo "$DEPLOYMENT_INFO" | jq -r '.items[0].metadata.namespace')
            echo "Using deployment in namespace: $NAMESPACE"

            # Save deployment JSON
            echo "$DEPLOYMENT_INFO" | jq '.items[0]' > /tmp/n8n-deployment.json

            # Extract environment variables from deployment
            POSTGRES_PASSWORD=$(jq -r '.spec.template.spec.containers[0].env[] | select(.name=="DB_POSTGRESDB_PASSWORD") | .value' /tmp/n8n-deployment.json)
            POSTGRES_USER=$(jq -r '.spec.template.spec.containers[0].env[] | select(.name=="DB_POSTGRESDB_USER") | .value' /tmp/n8n-deployment.json)
            POSTGRES_DB=$(jq -r '.spec.template.spec.containers[0].env[] | select(.name=="DB_POSTGRESDB_DATABASE") | .value' /tmp/n8n-deployment.json)
          fi

          echo "Namespace: $NAMESPACE"
          echo "Database Name: $POSTGRES_DB"
          echo "Database User: $POSTGRES_USER"
          echo "Database Password: *** (hidden)"

          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
          echo "postgres_password=$POSTGRES_PASSWORD" >> $GITHUB_OUTPUT
          echo "postgres_username=$POSTGRES_USER" >> $GITHUB_OUTPUT
          echo "postgres_database=$POSTGRES_DB" >> $GITHUB_OUTPUT

          echo "✅ Kubernetes extraction complete"

      - name: Save Variables as GitHub Secrets
        run: |
          echo "==================== SAVING TO GITHUB SECRETS ===================="

          # Authenticate with GitHub CLI
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

          # Save each variable as environment secret
          echo "Saving TF_VAR_subscription_id..."
          echo "${{ steps.extract-azure.outputs.subscription_id }}" | gh secret set TF_VAR_subscription_id --env n8n_bs --repo ${{ github.repository }}

          echo "Saving TF_VAR_administrator_login..."
          echo "${{ steps.extract-azure.outputs.administrator_login }}" | gh secret set TF_VAR_administrator_login --env n8n_bs --repo ${{ github.repository }}

          echo "Saving TF_VAR_administrator_login_password..."
          echo "${{ steps.extract-k8s.outputs.postgres_password }}" | gh secret set TF_VAR_administrator_login_password --env n8n_bs --repo ${{ github.repository }}

          echo "Saving TF_VAR_namespace..."
          echo "${{ steps.extract-k8s.outputs.namespace }}" | gh secret set TF_VAR_namespace --env n8n_bs --repo ${{ github.repository }}

          echo "Saving TF_VAR_postgres_database..."
          echo "${{ steps.extract-k8s.outputs.postgres_database }}" | gh secret set TF_VAR_postgres_database --env n8n_bs --repo ${{ github.repository }}

          echo "Saving TF_VAR_postgres_username..."
          echo "${{ steps.extract-k8s.outputs.postgres_username }}" | gh secret set TF_VAR_postgres_username --env n8n_bs --repo ${{ github.repository }}

          echo "Saving TF_VAR_postgres_password..."
          echo "${{ steps.extract-k8s.outputs.postgres_password }}" | gh secret set TF_VAR_postgres_password --env n8n_bs --repo ${{ github.repository }}

          echo "Saving TF_VAR_PGHOST..."
          echo "${{ steps.extract-azure.outputs.pghost }}" | gh secret set TF_VAR_PGHOST --env n8n_bs --repo ${{ github.repository }}

          # Save empty values for client credentials (not needed with CLI auth)
          echo "Saving TF_VAR_client_id (empty)..."
          echo "" | gh secret set TF_VAR_client_id --env n8n_bs --repo ${{ github.repository }}

          echo "Saving TF_VAR_client_secret (empty)..."
          echo "" | gh secret set TF_VAR_client_secret --env n8n_bs --repo ${{ github.repository }}

          echo "Saving TF_VAR_tenant_id (empty)..."
          echo "" | gh secret set TF_VAR_tenant_id --env n8n_bs --repo ${{ github.repository }}

          echo "✅ All secrets saved successfully!"

      - name: Verify Secrets Were Saved
        run: |
          echo "==================== VERIFICATION ===================="

          # List all secrets in the environment (names only)
          echo "Secrets in environment 'n8n_bs':"
          gh secret list --env n8n_bs --repo ${{ github.repository }}

          echo ""
          echo "✅ Verification complete!"

      - name: Display Summary
        run: |
          echo "==================== EXTRACTION SUMMARY ===================="
          echo ""
          echo "✅ Successfully extracted and saved 11 Terraform variables:"
          echo ""
          echo "From Azure:"
          echo "  - TF_VAR_subscription_id: ${{ steps.extract-azure.outputs.subscription_id }}"
          echo "  - TF_VAR_administrator_login: ${{ steps.extract-azure.outputs.administrator_login }}"
          echo "  - TF_VAR_PGHOST: ${{ steps.extract-azure.outputs.pghost }}"
          echo ""
          echo "From n8n Deployment:"
          echo "  - TF_VAR_namespace: ${{ steps.extract-k8s.outputs.namespace }}"
          echo "  - TF_VAR_postgres_database: ${{ steps.extract-k8s.outputs.postgres_database }}"
          echo "  - TF_VAR_postgres_username: ${{ steps.extract-k8s.outputs.postgres_username }}"
          echo "  - TF_VAR_administrator_login_password: *** (hidden)"
          echo "  - TF_VAR_postgres_password: *** (hidden)"
          echo ""
          echo "Default/Empty values:"
          echo "  - TF_VAR_client_id: (empty - not needed with CLI auth)"
          echo "  - TF_VAR_client_secret: (empty - not needed with CLI auth)"
          echo "  - TF_VAR_tenant_id: (empty - not needed with CLI auth)"
          echo ""
          echo "==================== NEXT STEPS ===================="
          echo ""
          echo "All required variables are now saved as GitHub secrets!"
          echo "You can now run the 'Apply Python Task Runner - External Mode' workflow."
          echo ""
          echo "The workflow will use these saved secrets automatically."
